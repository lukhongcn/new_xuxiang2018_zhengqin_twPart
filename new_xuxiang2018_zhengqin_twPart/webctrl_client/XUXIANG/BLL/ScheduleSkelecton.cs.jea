using System;
using System.Collections;
using ModuleWorkFlow.Model;


namespace ModuleWorkFlow.BLL
{
	/// <summary>
	/// Summary description for ScheduleSkelecton.
	/// </summary>
	/// 
	

	public class ScheduleSkelecton
	{
		private int nextdayminutes=8*60;

		private string moduleid="";
		private IList LBigschedule = new ArrayList();

		public PartProcessInfo DealScheduleSkelecton(PartProcessInfo partprocessinfo)
		{
			
			PartProcessInfo ppi=partprocessinfo;
			if (ppi.StartDate.Ticks==DateTime.MinValue.Ticks)
			{
				ppi.StartDate=ppi.EndDate.AddMinutes(-ppi.RemaintneedMinutes);
			}
			else
			{
				if (ppi.FactStartDate.Ticks==DateTime.MinValue.Ticks)
				{
					ppi.EndDate=ppi.StartDate.AddMinutes(ppi.RemaintneedMinutes);
				}
				else
				{
					//if (ppi.ScheduleDate.Ticks==DateTime.MinValue.Ticks)
					//{
						ppi.EndDate=ppi.FactStartDate.AddMinutes(ppi.RemaintneedMinutes);
					//}
					//else
					//{
						//ppi.EndDate=ppi.ScheduleDate.AddMinutes(ppi.RemaintneedMinutes);
					//}
				}
			}
			return ppi;
		}

		public PartProcessInfo DealSchedule(PartProcessInfo partprocessinfo,DateTime processdate)
		{
			PartProcessInfo ppi=partprocessinfo;
			if (ppi.StartDate.Ticks==DateTime.MinValue.Ticks)
			{
				ppi.StartDate=processdate;
			}
			else
			{
				ppi.EndDate=processdate;
			}

			if (processdate.Ticks<ppi.StartDate.Ticks)
			{
				ppi.StartDate=processdate;
			}

			if (processdate.Ticks>ppi.EndDate.Ticks)
			{
				ppi.EndDate=processdate;
			}
			return ppi;
		}

		public DateTime SetNextProcessDate(IList schedules,PartProcessInfo prepartprocessinfo,int nextday)
		{
			int totalminutes=0;
			ScheduleInfo scheduleinfo;
			DateTime nextprocessdate=new DateTime();
			nextprocessdate=prepartprocessinfo.EndDate;

			for (int i=0;i<schedules.Count;i++)
			{
				scheduleinfo=(ScheduleInfo)schedules[i];
				if(scheduleinfo.ProcessDate.Ticks/1000==prepartprocessinfo.EndDate.Ticks/1000 && 
					scheduleinfo.ModuleId.Equals(prepartprocessinfo.ModuleId) &&
					scheduleinfo.PartNo_Id.Equals(prepartprocessinfo.PartNo_Id))
				{
					totalminutes=totalminutes+scheduleinfo.ProcessMinute;
				}
			}


			for (int i=schedules.Count-1;i>-1;i--)
			{
				scheduleinfo=(ScheduleInfo) schedules[i];
				if (scheduleinfo.ProcessDate.Ticks/1000==prepartprocessinfo.EndDate.Ticks/1000 && 
					scheduleinfo.ProcessId.Equals(prepartprocessinfo.ProcessId) &&
					scheduleinfo.ModuleId.Equals(prepartprocessinfo.ModuleId) &&
					scheduleinfo.PartNo_Id.Equals(prepartprocessinfo.PartNo_Id))
				{
					if (scheduleinfo.ProcessMinute+totalminutes>=nextdayminutes)
					{
						nextprocessdate=nextprocessdate.AddDays(nextday);
					}
					
					break;
				}
				
			}
			

			


			return nextprocessdate;
		}

		public DateTime DealStartDateWithBigSchedule(string moduleId,string processId,DateTime nextprocessdate)
		{
			//compare with the bigschedule
			if (!moduleid.Equals(moduleId))
			{
				//get bigschedule of the module
				LBigschedule = new BigSchedule().GetBigScheduleByModuleId(moduleId);
				moduleid = moduleId;
			}
			for (int i=0; i< LBigschedule.Count; i++)
			{
				BigScheduleInfo bsi = (BigScheduleInfo)LBigschedule[i];
				if (bsi.ProcessId.Equals(processId))
				{
					if (nextprocessdate.Ticks<bsi.ScheduleStart.Ticks)
					{
						nextprocessdate = bsi.ScheduleStart;
					}
					break;
				}


			}

			return nextprocessdate;
		}

		public IList DealDesignAssembleSkelecton(IList partprocessinfos)
		{
			IList infos;
			IList rinfos=new ArrayList();
			string moduleid="";
			PartProcessInfo ppi;
			int i;
			
			while (partprocessinfos.Count>0)
			{
				//rerannge the list by moduleid
				ppi=partprocessinfos[0] as PartProcessInfo;
				moduleid=ppi.ModuleId; 
				infos=new ArrayList();
				i=0;
			
				while (i<partprocessinfos.Count)
				{
					ppi=partprocessinfos[i] as PartProcessInfo;
					if (ppi.ModuleId==moduleid)
					{
						infos.Add(ppi);
						partprocessinfos.Remove(ppi);
					}
					else
					{
						i++;
					}
				}

				if (infos.Count>0)
				{
					//set assemble and design
					infos=setAssembleDesign(infos);

					//add to return list;
					for (int j=0;j<infos.Count;j++)
					{
						rinfos.Add(infos[j]);
					}
				}
				

				

			}
			return rinfos;
		}

	
		private IList setAssembleDesign(IList infos)
		{
			DateTime assemblestarttime=DateTime.MinValue;
			DateTime designendtime=DateTime.MinValue;
			PartProcessInfo ppi;
			Hashtable hAeesmble = new Hashtable();

			//string prepartnoid="";
			string premoduleid="";
			//get assembletime or desingtime;
			for (int i=0;i<infos.Count;i++)
			{
				ppi=infos[i] as PartProcessInfo;
				//if (prepartnoid==ppi.PartNo_Id)
				if (premoduleid == ppi.ModuleId)
				{
					if (ppi.ProcessId=="Assemble")
					{
						if (ppi.FactStartDate.Ticks == DateTime.MinValue.Ticks)
						{
							if (assemblestarttime.Ticks==DateTime.MinValue.Ticks || assemblestarttime.Ticks<ppi.StartDate.Ticks)
							{
								assemblestarttime=ppi.StartDate;
							}
						}
						
					}
					/*if (ppi.ProcessId=="Design")
					{
						if (designendtime.Ticks==DateTime.MinValue.Ticks || designendtime.Ticks>ppi.EndDate.Ticks)
						{
							designendtime=ppi.EndDate;
						}

					}*/

				}
				else
				{
					if (i==0)
					{
						if (ppi.ProcessId=="Assemble")
						{
							if (ppi.FactStartDate.Ticks == DateTime.MinValue.Ticks)
							{
								if (assemblestarttime.Ticks==DateTime.MinValue.Ticks || assemblestarttime.Ticks<ppi.StartDate.Ticks)
								{
									assemblestarttime=ppi.StartDate;
								}
							}
						
						}
					}
					if (assemblestarttime.Ticks != DateTime.MinValue.Ticks)
					{
						hAeesmble[ppi.ModuleId] = assemblestarttime;
						assemblestarttime = DateTime.MinValue;
					}
					
				}
				//prepartnoid=ppi.PartNo_Id;
				premoduleid = ppi.ModuleId;
			}

			if (assemblestarttime.Ticks != DateTime.MinValue.Ticks)
			{
				ppi=infos[infos.Count-1] as PartProcessInfo;
				hAeesmble[ppi.ModuleId] = assemblestarttime;
				assemblestarttime = DateTime.MinValue;
			}

			//set assemblestarttime or designendtime
			for (int i=0;i<infos.Count;i++)
			{
				ppi=infos[i] as PartProcessInfo;
				if (ppi.ProcessId == "Assemble" && ppi.FactStartDate.Ticks == DateTime.MinValue.Ticks)
				{
					ppi.StartDate = (DateTime)hAeesmble[ppi.ModuleId];
					ppi.EndDate = ppi.StartDate.AddMinutes(ppi.RemaintneedMinutes);
					
				}
				/*if (designendtime.Ticks!=DateTime.MinValue.Ticks && ppi.ProcessId=="Design")
				{
					ppi.EndDate=designendtime;
					ppi.StartDate=ppi.EndDate.AddMinutes(-ppi.RemaintneedMinutes);
				}*/

				/*if (assemblestarttime.Ticks!=DateTime.MinValue.Ticks && ppi.ProcessId=="Assemble")
				{
					ppi.StartDate=assemblestarttime;
					ppi.EndDate=ppi.StartDate.AddMinutes(ppi.RemaintneedMinutes);
				}*/
			}

			return infos;
			
		}


	}
}
