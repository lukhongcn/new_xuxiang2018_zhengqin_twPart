<%-- 
??CodeSmith??NHibernate??????.Net?
--%>
<%@ CodeTemplate Language="C#" Debug="False" TargetLanguage="T-SQL" Description="Generates SQL to extract inline comments from stored procedures and add them as Description extended properties." %>
<%@ Property Name="ClassName" Type="System.String" Default="" Category="" Description="????" %>
<%@ Property Name="ModelClassAbbr" Type="System.String" Default="" Category="" Description="????" %>
<%@ Property Name="ModelNameSpace" Type="System.String" Default="" Category="" Description="outputdirectory" %>
<%@ Property Name="InterfaceNameSpace" Type="System.String" Default="" Category="" Description="outputdirectory" %>
<%@ Property Name="MsSqlNameSpace" Type="System.String" Default="" Category="" Description="outputdirectory" %>
<%@ Property Name="FactoryNameSpace" Type="System.String" Default="" Category="" Description="outputdirectory" %>
<%@ Property Name="BllNameSpace" Type="System.String" Default="" Category="" Description="outputdirectory" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>

/* ------------------------------------
	
  ??????(??)
  ??: zsy619@163.com
  ??: zsy.cnblogs.com
  ???<%= System.DateTime.Now.ToString("yyyy-MM-dd") %>
  
------------------------------------ */

using System;
using System.Collections;

using <%=ModelNameSpace%>;
namespace <%= InterfaceNameSpace %> 
{
	/// <summary>
	///
	/// </summary>
	public interface I<%= ClassName %>
	{
		bool Insert<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>);

		bool Update<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>);

		bool Delete<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>);

		IList Get<%= ClassName %>();
	}
}




using System;
using System.Collections;

using NHibernate;
using NHibernate.Cfg;

using <%=ModelNameSpace%>;
using <%=InterfaceNameSpace%>;
using Utility;

namespace <%=MsSqlNameSpace%>
{
	/// <summary>
	/// Summary description for ModuleDetail.
	/// </summary>
	public class <%= ClassName %>:I<%= ClassName %>
	{
		public bool Insert<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>)
		{
			ISession session = NHibernateHelper.GetCurrentSession();

			ITransaction tx = session.BeginTransaction();

			session.Save(<%= ModelClassAbbr %>);
			tx.Commit();

			NHibernateHelper.CloseSession();

			return true;

		}

		public bool Update<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>)
		{
			ISession session = NHibernateHelper.GetCurrentSession();

			ITransaction tx = session.BeginTransaction();

			session.Update(<%= ModelClassAbbr %>);
			tx.Commit();

			NHibernateHelper.CloseSession();

			return true;

		}

		public bool Delete<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>)
		{
			ISession session = NHibernateHelper.GetCurrentSession();

			ITransaction tx = session.BeginTransaction();

			session.Delete(<%= ModelClassAbbr %>);
			tx.Commit();

			NHibernateHelper.CloseSession();

			return true;

		}

		public IList Get<%= ClassName %>()
		{
			ISession session = NHibernateHelper.GetCurrentSession();

			ITransaction tx = session.BeginTransaction();

			IQuery query = session.CreateQuery("from <%=ModelNameSpace%>.<%= ClassName %>Info ");
			
			tx.Commit();

			return query.List();

		}
	}	
}


using System;
using System.Reflection;
using System.Configuration;
using System.Security.Policy;

using <%=InterfaceNameSpace%>;
namespace <%=FactoryNameSpace%>
{
	/// <summary>
	/// Summary description for MerchindiseOrder.
	/// </summary>
	public class <%= ClassName %>
	{
		public static <%=InterfaceNameSpace%>.I<%= ClassName %> Create() 
		{
			
			/// Look up the DAL implementation we should be using
			string path = "<%=MsSqlNameSpace%>";
			string className = "<%=MsSqlNameSpace%>.<%= ClassName %>";

			// Using the evidence given in the config file load the appropriate assembly and class
			return (<%=InterfaceNameSpace%>.I<%= ClassName %>)Assembly.Load(path).CreateInstance(className);
			
		}
	}
}

using System;
using System.Collections;

using <%=ModelNameSpace%>;
using  <%=FactoryNameSpace%>;
using  <%=InterfaceNameSpace%>;

namespace <%=BllNameSpace%>
{
	/// <summary>
	/// Summary description for Specification.
	/// </summary>
	public class <%= ClassName %>
	{
		private string UPDATE_SUCCESS = "????";
		private string UPDATE_FAILED = "????";

		I<%= ClassName %> dal;
		public <%= ClassName %>()
		{
			dal = <%=FactoryNameSpace%>.<%= ClassName %>.Create();
		}

		public string Insert<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>)
		{
			if (dal.Insert<%= ClassName %>(<%= ModelClassAbbr %>))
			{
				return UPDATE_SUCCESS;
			}
			else
			{
				return UPDATE_FAILED;
			}
		}

		public string Update<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>)
		{
			if (dal.Update<%= ClassName %>(<%= ModelClassAbbr %>))
			{

				return UPDATE_SUCCESS;
			}
			else
			{
				return UPDATE_FAILED;
			}
		}

		public string Delete<%= ClassName %> (<%= ClassName %>Info <%= ModelClassAbbr %>)
		{
			if (dal.Delete<%= ClassName %>(<%= ModelClassAbbr %>))
			{
				return UPDATE_SUCCESS;
			}
			else
			{
				return UPDATE_FAILED;
			}
		}

		public IList Get<%= ClassName %> ()
		{
			return dal.Get<%= ClassName %>();
		}
	}
}


<script runat="template">

/*[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
	[CodeTemplateProperty(CodeTemplatePropertyOption.Optional)]
	[Category("General")]
	[Description("The directory to output the results to.")]
	[DefaultValue("")]
	public string OutputDirectory 
	{ 
		get
		{
			if (_outputDirectory.Length == 0)
			{
				return @"c:\NetTiers\" + (SourceDatabase != null ? SourceDatabase.Name : "Output");
			}
			else
			{
				return _outputDirectory;
			}
		}
		set
		{
			if (value.EndsWith("\\")) value = value.Substring(0, value.Length - 1);
			_outputDirectory = value;
		} 
	}*/
/*
???????
*/
public string GetNetType(string inType)
{
	string result = "";
	switch(inType.ToLower().Trim())
	{
		case "text":
			result = "string";
			break;
		case "uniqueidentifier":
			result = "int";
			break;
		case "tinyint":
			result = "short";
			break;
		case "smallint":
			result = "short";
			break;
		case "int":
			result = "int";
			break;
		case "int32":
			result = "int";
			break;
		case "smalldatetime":
			result = "DateTime";
			break;
		case "real":
			result = "float";
			break;
		case "money":
			result = "decimal";
			break;
		case "datetime":
			result = "DateTime";
			break;
		case "float":
			result = "float";
			break;
		case "sql_variant":
			result = "string";
			break;
		case "ntext":
			result = "string";
			break;
		case "bit":
			result = "bool";
			break;
		case "decimal":
			result = "decimal";
			break;
		case "numeric":
			result = "decimal";
			break;
		case "smallmoney":
			result = "decimal";
			break;
		case "bigint":
			result = "long";
			break;
		case "varchar":
			result = "string";
			break;
		case "char":
			result = "char";
			break;
		case "timestamp":
			result = "TimeSpan";
			break;
		case "nvarchar":
			result = "string";
			break;
		case "nchar":
			result = "char";
			break;
		case "sysname":
			result = "string";
			break;
		default:
			result = "string";
			break;
	}
	return result;
}
/*
??????
*/
public void GetPropertyValue(string inType,string columnName)
{
	Response.WriteLine("		private " + GetNetType(inType) + " _" + columnName + ";");	
}
/*
????
*/
public void GetProperty(string inType,string columnName)
{
	string outType = GetNetType(inType);
	Response.WriteLine("		public virtual " + outType + " " + UpperFirstChar(columnName));
	Response.WriteLine("		{");
	Response.WriteLine("			get");
	Response.WriteLine("			{");
	Response.WriteLine("				return _" + columnName + ";");
	Response.WriteLine("			}");
	Response.WriteLine("			set");
	Response.WriteLine("			{");
	Response.WriteLine("				_" + columnName + " = value;");
	Response.WriteLine("			}");
	Response.WriteLine("		}");
}
/*
????????
*/
public string UpperFirstChar(string inputStr)
{
	string result = "";
	if(inputStr.Length >= 2)
	{
		string first = inputStr.Substring(0,1);
		string last	 = inputStr.Substring(1,inputStr.Length - 1);
		result = first.ToUpper() + last;
	}
	else
	{
		result = inputStr.ToUpper();	
	}
	return result;
}

/*
copy to file
*/
/*public void RenderToFile(string templateName, string path, bool overwrite)
{
	this._CurrentFileName = path;
	this.GetTemplate(templateName).RenderToFile(path, overwrite);
	this._counter++;
}*/
</script>
